void _print_transposed_matrix(const char* name, const dt_colormatrix_t matrix)
{
  printf("%s (no longer transposed)\n", name);
  printf("%.12f, %.12f, %.12f\n", matrix[0][0], matrix[1][0], matrix[2][0]);
  printf("%.12f, %.12f, %.12f\n", matrix[0][1], matrix[1][1], matrix[2][1]);
  printf("%.12f, %.12f, %.12f\n", matrix[0][2], matrix[1][2], matrix[2][2]);
  printf("\n\n");
}

static void _calculate_errors(const dt_iop_order_iccprofile_info_t *const base_profile,
                              float red_outset,
                              float green_outset,
                              float blue_outset,
                              float red_rotation,
                              float green_rotation,
                              float blue_rotation,
                              dt_colormatrix_t target_matrix_transposed,
                              float* max_error,
                              float* sq_error
  )
{
  float outset_and_unrotated_primaries[3][2];
  dt_rotate_and_scale_primary(base_profile, 1.f - red_outset, red_rotation, 0, outset_and_unrotated_primaries[0]);
  dt_rotate_and_scale_primary(base_profile, 1.f - green_outset, green_rotation, 1, outset_and_unrotated_primaries[1]);
  dt_rotate_and_scale_primary(base_profile, 1.f - blue_outset, blue_rotation, 2, outset_and_unrotated_primaries[2]);

  dt_colormatrix_t outset_and_unrotated_to_xyz_transposed;
  dt_make_transposed_matrices_from_primaries_and_whitepoint(outset_and_unrotated_primaries, base_profile->whitepoint,
                                                            outset_and_unrotated_to_xyz_transposed);
  dt_colormatrix_t tmp;
  dt_colormatrix_mul(tmp, outset_and_unrotated_to_xyz_transposed, base_profile->matrix_out_transposed);

  // _print_transposed_matrix("m", tmp);

  *sq_error = 0;
  *max_error = -1;
  for(int i = 0; i < 3; i++)
  {
    for(int j = 0; j < 3; j++)
    {
      const float diff = fabs(1 - tmp[i][j] / target_matrix_transposed[i][j]);
      *max_error = fmaxf(*max_error, fabs(diff));
      *sq_error += diff*diff;
    }
  }
}
static void _run_experiment_2(const dt_iop_order_iccprofile_info_t *const base_profile)
{
  const dt_colormatrix_t target_matrix_row_major = {
    {0.856627153315983, 0.0951212405381588, 0.0482516061458583},
    {0.137318972929847, 0.761241990602591, 0.101439036467562},
    {0.11189821299995, 0.0767994186031903, 0.811302368396859}};
  dt_colormatrix_t target_matrix_transposed;
  dt_colormatrix_transpose(target_matrix_transposed, target_matrix_row_major);

  printf("\n--- STARTING PARAMETER FITTING EXPERIMENT 2 ---\n");

  float search_range = 0.001;
  // user_params.red_inset = 0.29462451;
  // user_params.green_inset = 0.25861925;
  // user_params.blue_inset = 0.14641371;
  // user_params.red_rotation = 0.03540329;
  // user_params.green_rotation = -0.02108586;
  // user_params.blue_rotation = -0.06305724;
  float best_outsets[3] = {0.29462451, 0.25861925, 0.14641371};
  float best_rotations[3] = {0.03540329, -0.02108586, -0.06305724};

  float global_min_error;
  float global_min_sq_error;
  _calculate_errors(base_profile,
    best_outsets[0], best_outsets[1], best_outsets[2],
    best_rotations[0], best_rotations[1], best_rotations[2],
    target_matrix_transposed,
    &global_min_error, &global_min_sq_error);
  printf("Initial error: %.12f\n", global_min_error);
  printf("        squared error sum: %.12f\n", global_min_sq_error);

  int iteration = 0;
  while(1)
  {
    iteration++;

    if (iteration % 100000000 == 0)
    {
      search_range *= 0.5;
      printf("Iteration: %d, range: %.12f\n", iteration, search_range);
    }

    float r = ((float) random()) / RAND_MAX * 2 * search_range - search_range;
    const float red_outset = best_outsets[0] + r;
    r = ((float) random()) / RAND_MAX * 2 * search_range - search_range;
    const float green_outset = best_outsets[1] + r;
    r = ((float) random()) / RAND_MAX * 2 * search_range - search_range;
    const float blue_outset = best_outsets[2] + r;

    r = ((float) random()) / RAND_MAX * 2 * search_range - search_range;
    const float red_rotation = best_rotations[0] + r;
    r = ((float) random()) / RAND_MAX * 2 * search_range - search_range;
    const float green_rotation = best_rotations[1] + r;
    r = ((float) random()) / RAND_MAX * 2 * search_range - search_range;
    const float blue_rotation = best_rotations[2] + r;

    float error, sq_error;
    _calculate_errors(base_profile,
      red_outset, green_outset, blue_outset,
      red_rotation, green_rotation, blue_rotation,
      target_matrix_transposed,
      &error, &sq_error);

    if (error < global_min_error && sq_error <= global_min_sq_error)
    {
      global_min_error = error;
      global_min_sq_error = sq_error;
      best_outsets[0] = red_outset;
      best_outsets[1] = green_outset;
      best_outsets[2] = blue_outset;

      best_rotations[0] = red_rotation;
      best_rotations[1] = green_rotation;
      best_rotations[2] = blue_rotation;

      //search_range *= 0.5;

      printf("Iteration: %d, best params so far:\n", iteration);
      printf("  red_outset:    %.12f\n", red_outset);
      printf("  green_outset:  %.12f\n", green_outset);
      printf("  blue_outset:   %.12f\n", blue_outset);
      printf("  red_rotation:    %.12f\n", red_rotation);
      printf("  green_rotation:  %.12f\n", green_rotation);
      printf("  blue_rotation:   %.12f\n", blue_rotation);
      printf("  Error: %.12f\n", error);
      printf("  Squared error sum: %.12f\n", sq_error);
      printf("  range: %.12f\n", search_range);

      float outset_and_unrotated_primaries[3][2];
      dt_rotate_and_scale_primary(base_profile, 1.f - red_outset, red_rotation, 0, outset_and_unrotated_primaries[0]);
      dt_rotate_and_scale_primary(base_profile, 1.f - green_outset, green_rotation, 1, outset_and_unrotated_primaries[1]);
      dt_rotate_and_scale_primary(base_profile, 1.f - blue_outset, blue_rotation, 2, outset_and_unrotated_primaries[2]);

      dt_colormatrix_t outset_and_unrotated_to_xyz_transposed;
      dt_make_transposed_matrices_from_primaries_and_whitepoint(outset_and_unrotated_primaries, base_profile->whitepoint,
                                                                outset_and_unrotated_to_xyz_transposed);
      dt_colormatrix_t tmp;
      dt_colormatrix_mul(tmp, outset_and_unrotated_to_xyz_transposed, base_profile->matrix_out_transposed);

      _print_transposed_matrix("m", tmp);

    }
  }
}
